using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CalLeakTest.Models;
using System.Data.SqlClient;

namespace CalLeakTest.Repositories
{
    public static class SqlHelper
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="conn"></param>
        /// <param name="model"></param>
        /// <param name="serial"></param>
        /// <returns></returns>
        public static NistData GetNistData(SqlConnection conn, string model, string serial)
        {
            try
            {
                if (conn.State != System.Data.ConnectionState.Open)
                    conn.Open();

                string cmdText = string.Format("SELECT TOP 1 * FROM [VpdOF].[dbo].[NistCalLeak] WHERE Model = '{0}' AND Serial = '{1}' order by CalibrationDate DESC", model, serial);
                SqlCommand cmd = new SqlCommand(cmdText, conn);
                SqlDataReader rdr = cmd.ExecuteReader();

                if (rdr.HasRows)
                {
                    NistData nistData = new NistData();
                    rdr.Read();

                    nistData.Id = rdr[0] as int? ?? default(int);
                    nistData.Model = rdr[1].ToString();
                    nistData.Serial = rdr[2].ToString();
                    nistData.CalibrationDate = rdr[3] as DateTime? ?? default(DateTime);
                    nistData.CalibrationDueDate = rdr[4] as DateTime? ?? default(DateTime);
                    nistData.Temp15Leak = rdr[5] as double? ?? default(double);
                    nistData.Temp16Leak = rdr[6] as double? ?? default(double);
                    nistData.Temp17Leak = rdr[7] as double? ?? default(double);
                    nistData.Temp18Leak = rdr[8] as double? ?? default(double);
                    nistData.Temp19Leak = rdr[9] as double? ?? default(double);
                    nistData.Temp20Leak = rdr[10] as double? ?? default(double);
                    nistData.Temp21Leak = rdr[11] as double? ?? default(double);
                    nistData.Temp22Leak = rdr[12] as double? ?? default(double);
                    nistData.Temp23Leak = rdr[13] as double? ?? default(double);
                    nistData.Temp24Leak = rdr[14] as double? ?? default(double);
                    nistData.Temp25Leak = rdr[15] as double? ?? default(double);
                    nistData.Temp26Leak = rdr[16] as double? ?? default(double);
                    nistData.Temp27Leak = rdr[17] as double? ?? default(double);
                    nistData.Temp28Leak = rdr[18] as double? ?? default(double);
                    nistData.Temp29Leak = rdr[19] as double? ?? default(double);
                    nistData.Temp30Leak = rdr[20] as double? ?? default(double);

                    rdr.Close();

                    return nistData;
                }
                else
                {
                    rdr.Close();
                    return null;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        internal static string AutoGenerateSernum()
        {
            try
            {
                // Get the autogenerated serial number for the model

                return string.Empty;
            }
            catch (Exception)
            {


                throw;
            }
        }

        internal static object SubmitAutoGeneratedSernum(SqlConnection conn, ref SernumInfo mySerialNumInfo)
        {
            try
            {
                string cmdText = "INSERT INTO [VpdOF].[dbo].[CalLeakAutoSN] (LogDate, ModelNumber, SerialNumber, SerialNumberDummy, IsPassTest, RunningNumber) " +
                                "VALUES (@LogDate, @ModelNumber, @SerialNumber, @SerialNumberDummy, @IsPassTest, @RunningNumber)";

                SqlCommand cmd = new SqlCommand(cmdText, conn);
                cmd.CommandType = System.Data.CommandType.Text;
                cmd.Parameters.Add(new SqlParameter("@LogDate", System.Data.SqlDbType.DateTime));
                cmd.Parameters["@LogDate"].Value = mySerialNumInfo.LogDate;
                cmd.Parameters.AddWithValue("@ModelNumber", mySerialNumInfo.Model);
                cmd.Parameters.AddWithValue("@SerialNumber", mySerialNumInfo.Sernum);
                cmd.Parameters.AddWithValue("@SerialNumberDummy", mySerialNumInfo.DummySernum);
                cmd.Parameters.AddWithValue("@IsPassTest", mySerialNumInfo.IsPassTest);
                cmd.Parameters.AddWithValue("@RunningNumber", mySerialNumInfo.RunningNumber);
                return cmd.ExecuteScalar();

            }
            catch (Exception)
            {

                throw;
            }
        }

        internal static object SubmitFinalCalLeakData(SqlConnection conn, ref CalLeakData myCalLeakData )
        {
            try
            {
                string cmdText = "INSERT INTO [VpdOF].[dbo].[CalLeakData] (PartNumber,SerialNumber,TestPort,LeakRate,UUTTemp,BoardTemp,Factor" +
                                       ",TestDate,TestedBy,NISTSerialNumber,NISTDescription,NISTPartNumber,NISTReportNumber" +
                                       ",NISTCalDate,NISTCalDueDate,StationSerialNumber,StationDescription" +
                                       ",StationModelNumber,StationReportNumber,StationCalDate,StationCalDueDate,IsPass) " +
                                 "VALUES (@PartNumber,@SerialNumber,@TestPort,@LeakRate,@UUTTemp,@BoardTemp,@Factor" +
                                       ",@TestDate,@TestedBy,@NISTSerialNumber,@NISTDescription,@NISTPartNumber,@NISTReportNumber" +
                                       ",@NISTCalDate,@NISTCalDueDate,@StationSerialNumber,@StationDescription" +
                                       ",@StationModelNumber,@StationReportNumber,@StationCalDate,@StationCalDueDate,@IsPass);" +
                                 "SELECT SCOPE_IDENTITY();";

                SqlCommand cmd = new SqlCommand(cmdText, conn);
                cmd.CommandType = System.Data.CommandType.Text;
                cmd.Parameters.AddWithValue("@PartNumber", myCalLeakData.PartNumber);
                cmd.Parameters.AddWithValue("@SerialNumber", myCalLeakData.SerialNumber);
                cmd.Parameters.AddWithValue("@TestPort", myCalLeakData.TestPortId);
                cmd.Parameters.AddWithValue("@LeakRate", myCalLeakData.LeakRate);
                cmd.Parameters.AddWithValue("@UUTTemp", myCalLeakData.UUTTemp);
                cmd.Parameters.AddWithValue("@BoardTemp", myCalLeakData.BoardTemp);
                cmd.Parameters.AddWithValue("@Factor", myCalLeakData.Factor);
                cmd.Parameters.Add(new SqlParameter("@TestDate", System.Data.SqlDbType.DateTime));
                cmd.Parameters["@TestDate"].Value = myCalLeakData.TestDate;
                cmd.Parameters.AddWithValue("@TestedBy", myCalLeakData.TestedBy);
                cmd.Parameters.AddWithValue("@NISTSerialNumber", myCalLeakData.NISTSerialNumber);
                cmd.Parameters.AddWithValue("@NISTDescription", myCalLeakData.NISTDescription);
                cmd.Parameters.AddWithValue("@NISTPartNumber", myCalLeakData.NISTPartNumber);
                cmd.Parameters.AddWithValue("@NISTReportNumber", myCalLeakData.NISTReportNumber);
                cmd.Parameters.Add(new SqlParameter("@NISTCalDate", System.Data.SqlDbType.DateTime));
                cmd.Parameters["@NISTCalDate"].Value = myCalLeakData.NISTCalDate;
                cmd.Parameters.Add(new SqlParameter("@NISTCalDueDate", System.Data.SqlDbType.DateTime));
                cmd.Parameters["@NISTCalDueDate"].Value = myCalLeakData.NISTCalDueDate;
                cmd.Parameters.AddWithValue("@StationSerialNumber", myCalLeakData.StationSerialNumber);
                cmd.Parameters.AddWithValue("@StationDescription", myCalLeakData.StationDescription);
                cmd.Parameters.AddWithValue("@StationModelNumber", myCalLeakData.StationModelNumber);
                cmd.Parameters.AddWithValue("@StationReportNumber", myCalLeakData.StationReportNumber);
                cmd.Parameters.Add(new SqlParameter("@StationCalDate", System.Data.SqlDbType.DateTime));
                cmd.Parameters["@StationCalDate"].Value = myCalLeakData.StationCalDate;
                cmd.Parameters.Add(new SqlParameter("@StationCalDueDate", System.Data.SqlDbType.DateTime));
                cmd.Parameters["@StationCalDueDate"].Value = myCalLeakData.StationCalDueDate;
                cmd.Parameters.AddWithValue("@IsPass", myCalLeakData.IsPass);

                return cmd.ExecuteScalar();

            }
            catch (Exception)
            {

                throw;
            }
        }

        internal static string CheckIsCalLeakTestedBefore(SqlConnection conn, string trackingNum, bool isPassed)
        {
            try
            {
                string cmdText = string.Format("select TOP(1) asn.SerialNumber " +
                                                "from [VpdOF].[dbo].[CalLeakAutoSN] as asn " +
                                                "where asn.SerialNumberDummy = '{0}' " +
                                                "order by asn.LogDate Asc", trackingNum);
                if (conn.State == System.Data.ConnectionState.Closed)
                    conn.Open();

                SqlCommand command = new SqlCommand(cmdText, conn);
                using (SqlDataReader rdr = command.ExecuteReader())
                {
                    if (rdr.HasRows)
                    {
                        rdr.Read();
                        string sernum = rdr[0].ToString();
                        return sernum;
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        internal static string GetNextRunningNumber(SqlConnection conn, ref SernumInfo sernumInfo)
        {
            try
            {
                string cmdText = string.Format("Select TOP 1 sn.RunningNumber " +
                                    "From [VpdOF].[dbo].[CalLeakAutoSN] As sn " +
                                    "Where sn.ModelNumber = '{0}' And YEAR(sn.LogDate) = YEAR(GetDate()) AND MONTH(sn.LogDate) = MONTH(GetDate()) " +
                                    "Order By sn.LogDate DESC", sernumInfo.Model);
                if (conn.State == System.Data.ConnectionState.Closed)
                    conn.Open();

                SqlCommand command = new SqlCommand(cmdText, conn);
                using (SqlDataReader rdr = command.ExecuteReader())
                {
                    if (rdr.HasRows)
                    {
                        rdr.Read();
                        int prevNumber = rdr[0] as int? ?? default(int);
                        int newNumber = prevNumber + 1;
                        sernumInfo.RunningNumber = newNumber;
                        return string.Format("P{0}", sernumInfo.RunningNumber.ToString("D3"));
                    }
                    else
                    {
                        sernumInfo.RunningNumber = 1;
                        return "P001";
                    }
                }
                
            }
            catch (Exception)
            {

                throw;
            }
        }

        internal static string GetCurrentRunningNumber(SqlConnection conn, ref SernumInfo sernumInfo)
        {
            try
            {
                string cmdText = string.Format("Select TOP 1 sn.RunningNumber " +
                                    "From [VpdOF].[dbo].[CalLeakAutoSN] As sn " +
                                    "Where sn.ModelNumber = '{0}' And YEAR(sn.LogDate) = YEAR(GetDate()) AND MONTH(sn.LogDate) = MONTH(GetDate()) " +
                                    "Order By sn.LogDate DESC", sernumInfo.Model);
                if (conn.State == System.Data.ConnectionState.Closed)
                    conn.Open();

                SqlCommand command = new SqlCommand(cmdText, conn);
                using (SqlDataReader rdr = command.ExecuteReader())
                {
                    if (rdr.HasRows)
                    {
                        rdr.Read();
                        int currNumber = rdr[0] as int? ?? default(int);
                        sernumInfo.RunningNumber = currNumber;
                        return string.Format("P{0}", sernumInfo.RunningNumber.ToString("D3"));
                    }
                    else
                    {
                        sernumInfo.RunningNumber = 1;
                        return "P001";
                    }
                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        public static string GetCsvStringEquipmentUsed(SqlConnection con, int stationId, int productId)
        {
            try
            {
                List<string> listOfEqTrackingIds = new List<string>();
                string cmdText = string.Format("SELECT et.Id, et.TrackingId FROM [VpdOF].[dbo].[EquipmentTracking] AS et WHERE et.StationId = {0}", stationId);
                using (SqlCommand cmd = new SqlCommand(cmdText, con))
                {
                    using (SqlDataReader rdr = cmd.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            while (rdr.Read())
                            {
                                listOfEqTrackingIds.Add(string.Format("{0}_{1}", rdr[0].ToString(), rdr[1].ToString()));
                            }
                        }
                    }
                }

                //// now get the current ID for each equipments
                //List<Int64> listOfEqId = new List<long>();
                //foreach (var eqId in listOfEqTrackingIds)
                //{
                //    listOfEqId.Add(GetCertTestEquipmentId(con, eqId, stationId));   // station id 2 is for CalLeak tester
                //}

                return string.Join(",", listOfEqTrackingIds);
            }
            catch (Exception)
            {

                throw;
            }
        }
 
        private static Int64 GetCertTestEquipmentId(SqlConnection con, string trackingId, int stationId)
        {
            try
            {
                string cmdText = string.Format("SELECT TOP 1 [Id] " +
                                              "FROM [VpdOF].[dbo].[EquipmentTracking] AS et " +
                                              "WHERE et.TrackingId = '{0}' AND et.StationId = {1} " +
                                              "ORDER BY LogDate DESC", trackingId, stationId);
                Int64 id = 0;
                using (SqlCommand cmd = new SqlCommand(cmdText, con))
                {
                    using (SqlDataReader rdr = cmd.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            while (rdr.Read())
                            {
                                id = rdr[0] as Int64? ?? default(Int64);
                            }
                        }
                    }
                }

                return id;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public static void SaveCertDetails(SqlConnection con, int calLeakDataId, string equipmentIds)
        {
            try
            {
                string cmdText = string.Format("INSERT INTO [VpdOF].[dbo].[CalLeakCertificates] (CalLeakDataId, EquipmentIds) VALUES(@p1, @p2)");
                using (SqlCommand cmd = new SqlCommand(cmdText, con))
                {
                    cmd.Parameters.Add("@p1", System.Data.SqlDbType.Int).Value = calLeakDataId;
                    cmd.Parameters.Add("@p2", System.Data.SqlDbType.VarChar).Value = equipmentIds;
                    cmd.CommandType = System.Data.CommandType.Text;
                    var id = cmd.ExecuteScalar();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        public static List<EquipmentTracking> GetEquipmentsForTester(SqlConnection con, int stationId)
        {
            try
            {
                var listOfEquipments = new List<EquipmentTracking>();
                //string cmdText = string.Format("SELECT * FROM [VpdOF].[dbo].[EquipmentTracking] AS et WHERE et.StationId = {0}", stationId);
                string cmdText = string.Format("SELECT et.Id, et.TrackingId, e.PartNumber, et.SerialNumber, e.Description, et.CalibrationDate, et.CalibrationDueDate FROM [VpdOF].[dbo].[EquipmentTracking] as et " +
                                "INNER JOIN [VpdOF].[dbo].[Equipment] as e " +
                                "ON e.Id = et.EquipmentId WHERE et.StationId = {0}", stationId);
                using (SqlCommand cmd = new SqlCommand(cmdText,con))
                {
                    using (SqlDataReader rdr = cmd.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            while (rdr.Read())
                            {
                                listOfEquipments.Add(new EquipmentTracking
                                {
                                    Id = rdr[0] as Int64? ?? default(Int64),
                                    TrackingId = rdr[1].ToString(),
                                    EquipmentPartnumber = rdr[2].ToString(),
                                    SerialNumber = rdr[3].ToString(),
                                    Description = rdr[4].ToString(),
                                    CalibrationDate = rdr[5] as DateTime? ?? default(DateTime),
                                    CalibrationDueDate = rdr[6] as DateTime? ?? default(DateTime)
                                });
                            }
                        }
                    }
                }

                return listOfEquipments;
            }
            catch (Exception)
            {

                throw;
            }
        }

    }
}
