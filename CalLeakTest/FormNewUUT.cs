using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Text.RegularExpressions;
using CalLeakTest.Repositories;
using System.Diagnostics;
using System.Data.SqlClient;
using CalLeakTest.Models;

namespace CalLeakTest
{
    public partial class FormNewUUT : Form
    {
        public FormNewUUT()
        {
            InitializeComponent();
            m_dialogResult = DialogResult.None;
        }

        public FormNewUUT(DirectoryInfo projFolderDI, DirectoryInfo seqFolderDI, DirectoryInfo configFolderDI)
        {
            InitializeComponent();
            m_dialogResult = DialogResult.None;
            _diProjFolder = projFolderDI;
            _diSequenceFolder = seqFolderDI;
            _diConfigFolder = configFolderDI;
        }

        private const string strAlphaNumericOnly = "^[a-zA-Z0-9_]*$";
        private const string strFilenameUserConfig = "UserConfig.xml";

        private Dictionary<string, string[]> UUTDict;

        private DirectoryInfo _diProjFolder;
        public DirectoryInfo diProjFolder
        {
            get { return _diProjFolder; }
            set { _diProjFolder = value; }
        }

        private DirectoryInfo _diSequenceFolder;
        public DirectoryInfo diSequenceFolder
        {
            get { return _diSequenceFolder; }
            set { _diSequenceFolder = value; }
        }

        private DirectoryInfo _diConfigFolder;
        public DirectoryInfo diConfigFolder
        {
            get { return _diConfigFolder; }
            set { _diConfigFolder = value; }
        }

        private string _modelNumber;
        public string ModelNumber
        {
            get { return _modelNumber; }
            set { _modelNumber = value; }
        }

        private string _serialNumber;
        public string serialNumber
        {
            get { return _serialNumber; }
            set { _serialNumber = value; }
        }

        private string _optionNumber;
        public string OptionNumber
        {
            get { return _optionNumber; }
            set { _optionNumber = value; }
        }

        private int _testPort;
        public int TestPort
        {
            get { return _testPort; }
            set { _testPort = value; }
        }

        private DialogResult m_dialogResult;
        public DialogResult dialogResult
        {
            get { return m_dialogResult; }
            set { m_dialogResult = value; }
        }

        private bool m_autoGeneratedUUTInfo = false;
        public bool AutoGeneratedUUTInfo
        {
            get { return m_autoGeneratedUUTInfo; }
            set { m_autoGeneratedUUTInfo = value; }
        }

        public string[] Options { get; set; }

        public bool isProdMode = false;

        private SernumInfo mySernumInfo;
        public SernumInfo SerialNumberInfo
        {
            get { return mySernumInfo; }
            set { mySernumInfo = value; }
        }

        private void FormNewDut_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (m_dialogResult == DialogResult.OK || m_dialogResult == DialogResult.Cancel) return;
            if (DialogResult.No == MessageBox.Show("Are you sure want to close this form?",
                                                   "Quit UUT Configuration?",
                                                   MessageBoxButtons.YesNo,
                                                   MessageBoxIcon.Question))
            {
                // Cancel the closing event
                e.Cancel = true;
            }

        }

        private void btnOk_Click(object sender, EventArgs e)
        {
            try
            {

                // check if the option entered by user is available in the option list
                tbOption.Text = tbOption.Text.ToUpper();
                string optionSelected = tbOption.Text;

                this._optionNumber = optionSelected;

                tbSernum.Text = tbSernum.Text.ToUpper();

                // Get model, serial and option number
                _modelNumber = cbModelNumber.Text;
                _serialNumber = tbSernum.Text.ToUpper();
                _optionNumber = tbOption.Text;
                _testPort = Convert.ToInt32(cbTestPort.Text);

                if (_modelNumber.Trim() == string.Empty && isProdMode)
                {
                    MessageBox.Show("Please select Model Number");
                    cbModelNumber.Focus();
                    return;
                }
                if (_serialNumber == string.Empty && isProdMode)
                {
                    MessageBox.Show("Please fill the Tracking-Number");
                    tbSernum.Focus(); tbSernum.SelectAll();
                    return;
                }
                if (_optionNumber == string.Empty && isProdMode)
                {
                    MessageBox.Show("Please select the Option");
                    tbOption.Focus();
                    return;
                }

                if (!isProdMode) goto Proceed;  // skip validation if not in production mode.

                // Add checking on the UUT tested many times. Prevent user to re-test UUT that already tested and passed. 20-May-2015 -Hairus
                string sqlConStr = CalLeakConfigs.Default.SqlConString;
                using (SqlConnection conn = new SqlConnection(sqlConStr))
                {
                    conn.Open();
                    var retVal = SqlHelper.CheckIsCalLeakTestedBefore(conn, _serialNumber, true);
                    if (retVal != null)
                    {
                        MessageBox.Show("FYI. THIS UNIT HAS ALREADY BEEN TESTED PASSED!!!", "OPERATOR ERROR", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return;
                    }
                }

                // Check Test Equipments calibration status
                using (SqlConnection con = new SqlConnection(CalLeakConfigs.Default.SqlConString))
                {
                    con.Open();
                    var listOfEquipment = SqlHelper.GetEquipmentsForTester(con, 2);
                    var listOfOverdueEquipment = new List<EquipmentTracking>();
                    var listOfToNotifiedEq = new List<EquipmentTracking>();
                    foreach (var eq in listOfEquipment)
                    {
                        if (DateTime.Now > eq.CalibrationDueDate)// if current date is greater than now
                        {
                            if (DateTime.Now.Date == eq.CalibrationDueDate)
                            {
                                goto next;
                            }
                            listOfOverdueEquipment.Add(eq);
                            next:
                            continue;
                        }

                        else if (eq.CalibrationDueDate.Subtract(DateTime.Now).TotalDays < 14)
                        {
                            listOfToNotifiedEq.Add(eq);
                        }
                    }

                    // Block the test if Overdue equipment is used
                    if (listOfOverdueEquipment.Count > 0)
                    {
                        List<string> eqInfos = new List<string>();
                        for (int i = 0; i < listOfOverdueEquipment.Count; i++)
                        {
                            eqInfos.Add(string.Format("{0}) {1} - {2} - {3}   {4}", i + 1, listOfOverdueEquipment[i].EquipmentPartnumber,
                                        listOfOverdueEquipment[i].SerialNumber, listOfOverdueEquipment[i].Description, listOfOverdueEquipment[i].CalibrationDueDate.ToString("dd-MMM-yyyy")));

                        }
                        string msg = string.Join(Environment.NewLine, eqInfos);
                        TestBlocked myFormBlock = new TestBlocked();
                        myFormBlock.msg = msg;
                        myFormBlock.ShowDialog();
                        return;
                    }
                    else if (listOfToNotifiedEq.Count > 0)
                    {

                    }
                }

            Proceed: ;
                // Check Model, Serial and Option Number. If invalid, 
                if (!UutInfoIsValid(_modelNumber, _serialNumber, _optionNumber))
                    return;

                // Set DialogResult as OK
                m_dialogResult = DialogResult.OK;
                this.Close();
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                // Set dialog result as Cancel
                m_dialogResult = DialogResult.Cancel;
                this.ModelNumber = null;
                this.Close();
            }
            catch (Exception)
            {

                throw;
            }
        }

        private bool UutInfoIsValid(string model, string sernum, string option)
        {
            try
            {
                if (model == string.Empty || sernum == string.Empty)
                {
                    MessageBox.Show("Please fill in every field.", "All fields are mandatory");
                    return false;
                }

                Regex regex = new Regex(strAlphaNumericOnly);
                if (!regex.IsMatch(model))
                {
                    MessageBox.Show("Model number must be an alphanumeric text");
                    return false;
                }
                if (!regex.IsMatch(sernum))
                {
                    MessageBox.Show("Serial number must be an alphanumeric text");
                    return false;
                }
                if (!regex.IsMatch(option))
                {
                    MessageBox.Show("Option number must be an alphanumeric text");
                    return false;
                }

                return true;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void tbSernum_Leave(object sender, EventArgs e)
        {
            tbSernum.Text = tbSernum.Text.ToUpper();
        }

        private void FormNewUUT_Load(object sender, EventArgs e)
        {
            try
            {
                this.CenterToParent();
                this.AcceptButton = this.btnOk;
                this.cbModelNumber.SelectedIndex = 0;


                this.tbSernum.Focus();
                this.tbSernum.SelectAll();

                this.ActiveControl = tbSernum;
            }
            catch (Exception ex)
            {
            }
        }

        private void cbModelNumber_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (isProdMode)
                {
                    //// Autogenerate Serial Number
                    //string sqlConStr = CalLeakConfigs.Default.SqlConString;
                    //string modelNumber = cbModelNumber.Items[cbModelNumber.SelectedIndex].ToString();
                    //string serialNumber = string.Empty;
                    //DateTime todayDate = DateTime.Now;
                    //mySernumInfo = new SernumInfo();
                    //mySernumInfo.Model = modelNumber;
                    //using (SqlConnection conn = new SqlConnection(sqlConStr))
                    //{
                    //    Trace.WriteLine("Connecting to SQL Database for serial number retrieval");
                    //    conn.Open();
                    //    Trace.WriteLine("Connection succeeded");
                    //    var newSernum = SqlHelper.GetPrevRunningNumber(conn, ref mySernumInfo);
                    //    serialNumber = string.Format("MY{0}{1}{2}", todayDate.ToString("yy"), todayDate.ToString("MM"), newSernum);
                    //}

                    //this.tbSernum.Text = serialNumber.Trim().ToUpper();
                    //this.tbSernum.Enabled = false;
                }
                else
                {
                    //this.serialNumber = "";
                    //this.tbSernum.Text = "";
                    //this.tbSernum.Enabled = true;
                    //this.tbSernum.SelectAll();
                }
            }
            catch (Exception ex)
            {

                Trace.WriteLine(ex.Message);
            }
        }

    }
}
